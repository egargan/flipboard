{"version":3,"file":"bundle.js","sources":["../script.js","../demo/index.js"],"sourcesContent":["// Represents a grid of delay timings that a Flipboard looks-up and applies\n// to its FlipPads' transitions\n//\n// TODO:\n// - Offer transition pattern presets, e.g. 'standard', 'simultaneous'\n// - Accept 2d equations describing delay wrt. grid row and column\n// - Provide 'newTable' method that recreates delay table with new timings\nexport class TransitionComposer {\n    constructor({\n        numRows,\n        numCols,\n        rowCoeff = 50,\n        colCoeff = 50,\n        maxVariation = 100,\n    }) {\n        const delayTable = [];\n\n        let maxDelay = 0;\n        let maxDelayCell = [0, 0];\n\n        for (let col = 0; col < numCols; col++) {\n            const rowArray = [];\n\n            for (let row = 0; row < numRows; row++) {\n                const delay = Math.floor(\n                    (row * rowCoeff) + (col * colCoeff)\n                    + (Math.random() * maxVariation)\n                );\n\n                // Keep track of max delay time in grid, Flipboard\n                // needs to know this value\n                if (delay >= maxDelay) {\n                    maxDelayCell = [col, row];\n                    maxDelay = delay;\n                }\n\n                rowArray.push(delay);\n            }\n\n            delayTable.push(rowArray);\n        }\n\n        this.delayTable = delayTable;\n        this.numRows = numRows;\n        this.numCols = numCols;\n\n        this.maxDelayCell = maxDelayCell;\n    }\n\n    getDelay(row, col) {\n        return this.delayTable[col][row];\n    }\n\n    // Returns a 2-length array for the X (col) and Y (row) position of the\n    // delay table cell with the largest delay\n    getMaxDelayCell() {\n        return this.maxDelayCell;\n    }\n\n    printTable() {\n        const cellCharWidth = this.maxDelay.length;\n\n        for (let col = 0; col < this.numCols; col++) {\n            let rowString = '';\n\n            for (let row = 0; row < this.numRows; row++) {\n                const cellString = (this.delayTable[col][row] + (' '.repeat(cellCharWidth)))\n                    .slice(0, cellCharWidth);\n\n                rowString += ' ' + cellString;\n            }\n\n            console.log(rowString)\n        }\n    }\n}\n\n// Controls a Flipboard instance, providing it with the image data to display,\n// and regularly triggering transitions between the images, making sure\n// the 'current' and 'next' images are set accordingly so they're displayed\n// in sequence\nexport class Cycler {\n    constructor(flipboard, cyclePeriodSeconds, imageUrlList) {\n        this.imageList = [];\n        this.flipboard = flipboard;\n\n        const gridGap = flipboard.getGridGap();\n        const cellSize = flipboard.getPadSize();\n        const numCols = flipboard.getNumCols();\n        const numRows = flipboard.getNumRows();\n\n        for (let i = 0; i < imageUrlList.length; i++) {\n            // TODO: improve ID naming here - use filename?\n            const svgImageGrid = new SvgImageGrid({\n                imageUrl: imageUrlList[i],\n                cellSize: cellSize,\n                numCols: numCols,\n                numRows: numRows,\n                gridGap: gridGap,\n                gridId: i\n            });\n\n            // TODO: this smells, don't like 1. pushing elements to flipboard's\n            // pattern's div, 2. creating pattern defs here\n            const patternsDefs = svgImageGrid.createPatternsDefs();\n            flipboard.getPatternsDiv().appendChild(patternsDefs);\n\n            this.imageList.push(svgImageGrid);\n        }\n\n        this.currentImageIndex = 0;\n\n        // TODO: this assumes >= 2 images have been given! Handle case where\n        // e.g. 1 image was given\n        flipboard.setCurrentFill(this.imageList[0]);\n        flipboard.setNextFill(this.imageList[1]);\n\n        this.cyclePeriodMilliseconds = cyclePeriodSeconds * 1000;\n        this.isCycling = false;\n    }\n\n    enableCycling() {\n        if (this.cycleInterval != null) {\n            clearInterval(this.cycleInterval);\n        }\n\n        const cyclerRef = this;\n\n        this.cycleInterval = setInterval(\n            () => { cyclerRef.cycle(); },\n            this.cyclePeriodMilliseconds\n        );\n\n        this.isCycling = true;\n    }\n\n    disableCycling() {\n        if (this.cycleInterval != null) {\n            clearInterval(this.cycleInterval);\n        }\n\n        this.isCycling = false;\n    }\n\n    manualCycle() {\n        this.cycle();\n\n        // If already cycling, re-enable cycling to reset timer interval\n        if (this.isCycling) {\n            this.enableCycling();\n        }\n    }\n\n    cycle() {\n        this.flipboard.flip(() => {\n            this.incrementCurrentImageIndex();\n            this.flipboard.setNextFill(this.imageList[this.getNextImageIndex()]);\n        });\n    }\n\n    getNextImageIndex() {\n        return (this.currentImageIndex + 1) % this.imageList.length;\n    }\n\n    incrementCurrentImageIndex() {\n        if (this.currentImageIndex >= this.imageList.length - 1) {\n            this.currentImageIndex = 0;\n        }\n        else {\n            this.currentImageIndex++;\n        }\n    }\n}\n\n// Segments a given image into a grid of square tiles, creating a list of\n// SVG 'patterns' to be referenced in each tile in a grid of SVG elements\nclass SvgImageGrid {\n    constructor({\n        imageUrl,\n        cellSize,\n        numCols,\n        numRows,\n        gridGap,\n        gridId = Math.random()\n    }) {\n        const imageWidth = numCols * cellSize + ((numCols - 1) * gridGap);\n        const imageHeight = numRows * cellSize + ((numRows - 1) * gridGap);\n\n        this.patternImage = this.createPatternImage(\n            imageUrl, imageWidth, imageHeight\n        );\n\n        this.gridId = gridId;\n\n        this.gridGap = gridGap;\n        this.numCols = numCols;\n        this.numRows = numRows;\n        this.cellSize = cellSize;\n\n        this.imageWidth = imageWidth;\n        this.imageHeight = imageHeight;\n    }\n\n    // Creates the list of pattern elements for each tile in the grid-segmented\n    // image, and returns them in an SVG container element\n    createPatternsDefs() {\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n\n        svg.setAttribute('width', 0);\n        svg.setAttribute('height', 0);\n\n        svg.appendChild(defs);\n\n        for (let col = 0; col < this.numCols; col++) {\n            for (let row = 0; row < this.numRows; row++) {\n                const pattern = document.createElementNS(\n                    'http://www.w3.org/2000/svg',\n                    'pattern'\n                );\n\n                pattern.id = this.getCellPatternId(col, row);\n\n                pattern.setAttribute('patternUnits', 'userSpaceOnUse');\n\n                const xOffset = col * this.cellSize + (col * this.gridGap);\n                const yOffset = row * this.cellSize + (row * this.gridGap);\n\n                pattern.setAttribute('x', '-' + xOffset);\n                pattern.setAttribute('y', '-' + yOffset);\n\n                pattern.setAttribute('width', this.imageWidth);\n                pattern.setAttribute('height', this.imageHeight);\n\n                pattern.appendChild(this.patternImage.cloneNode(false));\n\n                defs.appendChild(pattern);\n            }\n        }\n\n        return svg;\n    }\n\n    // Creates a full-size SVG image element given an image URL,\n    // sized to the given dimensions\n    createPatternImage(imageUrl, width, height) {\n        const patternImage = document.createElementNS('http://www.w3.org/2000/svg', 'image');\n\n        patternImage.setAttribute('href', imageUrl);\n\n        patternImage.setAttribute('preserveAspectRatio', 'none');\n        patternImage.setAttribute('width', width);\n        patternImage.setAttribute('height', height);\n\n        return patternImage;\n    }\n\n    // Given a row and column index, returns the element ID of the pattern that\n    // displays that cell's portion of the overall image\n    getCellPatternId(col, row) {\n        return this.gridId + '-' + col + '-' + row;\n    }\n\n    // Gets the string that's used to apply the (col, row)-th segment of the image\n    // to an SVG element\n    getFillString(col, row) {\n        return 'url(#' + this.getCellPatternId(col, row) + ')';\n    }\n}\n\n// A grid of flipbook-style tiles that together display a series of images,\n// shown one after the other, transitioned between by 'flipping' the flipbook cells\nexport class Flipboard {\n    constructor({\n        numCols,\n        numRows,\n        padSize = 100,\n        gridGap = 4,\n        cornerRadius = 5,\n        // TODO: provide default here - default TransitionComposer state?\n        transitionComposer = null,\n    }) {\n        const containerDiv = document.createElement('div');\n\n        // Create div for storing SVG <pattern> elements, required by SvgImageGrid instances\n        // TODO: should it be Flipboard's job to create and maintain this?\n        const patternsDiv = document.createElement('div');\n        patternsDiv.style.height = '0px';\n        patternsDiv.style.width = '0px';\n\n        const gridDiv = this.createGridDiv(numCols, gridGap + 'px');\n\n        containerDiv.appendChild(patternsDiv);\n        containerDiv.appendChild(gridDiv);\n\n        const padGrid = this.createPadGrid(numCols, numRows, padSize, cornerRadius);\n\n        for (let row = 0; row < numRows; row++) {\n            for (let col = 0; col < numCols; col++) {\n                const pad = padGrid[col][row];\n                gridDiv.appendChild(pad.getElement());\n            }\n        }\n\n        this.transitionComposer = transitionComposer;\n\n        this.containerDiv = containerDiv;\n        this.patternsDiv = patternsDiv;\n        this.padGrid = padGrid;\n\n        this.gridGap = gridGap;\n        this.padSize = padSize;\n        this.numCols = numCols;\n        this.numRows = numRows;\n    }\n\n    createPadGrid(numCols, numRows, padSize, cornerRadius) {\n        const padGrid = [];\n\n        // Iterate over rows + columns 'in reverse', i.e. for each row in each column,\n        // so we can lookup cells in the padGrid like 'padGrid[x][y]'\n        for (let col = 0; col < numCols; col++) {\n            const rowArray = [];\n\n            for (let row = 0; row < numRows; row++) {\n                const pad = new FlipPad(padSize, cornerRadius);\n                rowArray.push(pad);\n            }\n\n            padGrid.push(rowArray);\n        }\n\n        return padGrid;\n    }\n\n    createGridDiv(numCols, cellGap) {\n        const gridDiv = document.createElement('div');\n\n        gridDiv.style.display = 'grid';\n\n        // Allows additional styling, e.g. margin\n        gridDiv.classList.add('flipboard');\n\n        gridDiv.style.gridTemplateColumns = 'repeat(' + numCols + ', min-content)';\n        gridDiv.style.columnGap = cellGap;\n        gridDiv.style.rowGap = cellGap;\n\n        return gridDiv;\n    }\n\n    flip(onTransitionEndCallback) {\n        const [maxDelayCol, maxDelayRow] = this.transitionComposer.getMaxDelayCell();\n\n        for (let row = 0; row < this.numRows; row++) {\n            for (let col = 0; col < this.numCols; col++) {\n                const flipPad = this.padGrid[col][row];\n\n                const delay = this.transitionComposer.getDelay(row, col);\n                flipPad.setTransitionDelay(delay);\n\n                // When we encounter the cell with the largest delay, have it\n                // call the callback we're given when it's finished its transition\n                if (row == maxDelayRow && col == maxDelayCol) {\n                    flipPad.flip(onTransitionEndCallback);\n                }\n                else {\n                    flipPad.flip();\n                }\n            }\n        }\n    }\n\n    setCurrentFill(filler) {\n        for (let row = 0; row < this.numRows; row++) {\n            for (let col = 0; col < this.numCols; col++) {\n                const fillString = filler.getFillString(col, row);\n                this.padGrid[col][row].setCurrentPageFill(fillString);\n            }\n        }\n    }\n\n    setNextFill(filler) {\n        for (let row = 0; row < this.numRows; row++) {\n            for (let col = 0; col < this.numCols; col++) {\n                const fillString = filler.getFillString(col, row);\n                this.padGrid[col][row].setNextPageFill(fillString);\n            }\n        }\n    }\n\n    getPadSize() {\n        return this.padSize;\n    }\n\n    getNumCols() {\n        return this.numCols;\n    }\n\n    getNumRows() {\n        return this.numRows;\n    }\n\n    getGridGap() {\n        return this.gridGap;\n    }\n\n    getElement() {\n        return this.containerDiv;\n    }\n\n    getPatternsDiv() {\n        return this.patternsDiv;\n    }\n}\n\n// A collection of stacked triangular SVG elements that form a sort of endless\n// flipbook, turned through using the 'flip' method\nclass FlipPad {\n    constructor(size, cornerRadius) {\n        this.size = size;\n\n        // div used as container element for SVGs\n        this.element = document.createElement('div');\n\n        this.element.style.height = size + 'px';\n        this.element.style.width = size + 'px';\n        this.element.classList.add('tile');\n\n        // These 'current' and 'next' flaps refer to the two current visible flaps,\n        // and those folded up and hidden, to be displayed next on this.flip()\n        const currentTopFlap = new Flap(Orientation.TOP, size, cornerRadius);\n        const currentBottomFlap = new Flap(Orientation.BOTTOM, size, cornerRadius);\n        const nextBottomFlap = new Flap(Orientation.BOTTOM, size, cornerRadius);\n        const nextTopFlap = new Flap(Orientation.TOP, size, cornerRadius);\n\n        // The next bottom flap is currently unfolded, beneath the current bottom flap.\n        // We want to it to be folded facing away from us behind the current top flap.\n        nextBottomFlap.rotate();\n\n        this.element.appendChild(currentTopFlap.getElement());\n        this.element.appendChild(currentBottomFlap.getElement());\n        this.element.appendChild(nextBottomFlap.getElement());\n        this.element.appendChild(nextTopFlap.getElement());\n\n        this.currentTopFlap = currentTopFlap;\n        this.currentBottomFlap = currentBottomFlap;\n        this.nextTopFlap = nextTopFlap;\n        this.nextBottomFlap = nextBottomFlap;\n\n        this.setRestingFlapDepths();\n\n        this.isFlipping = false;\n    }\n\n    flip(onFlipFinishedCallback) {\n        if (this.isFlipping) {\n            return;\n        }\n\n        this.isFlipping = true;\n\n        // Once flip transition completes, silently move now-hidden current flaps\n        // into next flap, so 'recycling' them and using them as the next flaps\n        const onTransitionEndCallback = () => {\n            this.currentBottomFlap.disableTransition();\n            this.currentTopFlap.disableTransition();\n\n            this.currentBottomFlap.rotate();\n            this.currentTopFlap.unrotate();\n\n            // Hidden current flaps *become* next flaps\n            this.swapFlapReferences();\n\n            this.setRestingFlapDepths();\n\n            // Run 'on finished' callback argument, if given\n            if (onFlipFinishedCallback != null) {\n                onFlipFinishedCallback();\n            }\n\n            this.isFlipping = false;\n        }\n\n        this.currentTopFlap.enableTransition();\n        this.nextBottomFlap.enableTransition();\n\n        this.setTransitionFlapDepths();\n\n        this.currentTopFlap.rotate(onTransitionEndCallback);\n        this.nextBottomFlap.unrotate();\n    }\n\n    setNextPageFill(fillString) {\n        this.nextTopFlap.setFill(fillString);\n        this.nextBottomFlap.setFill(fillString);\n    }\n\n    setCurrentPageFill(fillString) {\n        this.currentTopFlap.setFill(fillString);\n        this.currentBottomFlap.setFill(fillString);\n    }\n\n    setRestingFlapDepths() {\n        this.currentTopFlap.bringToFront();\n        this.currentBottomFlap.bringToFront();\n\n        this.nextTopFlap.sendToBack();\n        this.nextBottomFlap.sendToBack();\n    }\n\n    // Makes sure the flap that's folding over will appear in front of the\n    // current bottom flap\n    setTransitionFlapDepths() {\n        this.nextBottomFlap.bringToFront();\n        this.currentBottomFlap.sendToBack();\n    }\n\n    setTransitionDelay(delayMilliseconds) {\n        this.currentTopFlap.setTransitionDelay(delayMilliseconds);\n        this.nextBottomFlap.setTransitionDelay(delayMilliseconds);\n    }\n\n    swapFlapReferences() {\n        const tempBottomFlap = this.currentBottomFlap;\n        const tempTopFlap = this.currentTopFlap;\n\n        this.currentBottomFlap = this.nextBottomFlap;\n        this.currentTopFlap = this.nextTopFlap;\n\n        this.nextBottomFlap = tempBottomFlap;\n        this.nextTopFlap = tempTopFlap;\n    }\n\n    getElement() {\n        return this.element;\n    }\n}\n\nconst Orientation = {\n    TOP: 1,\n    BOTTOM: 2,\n}\n\n// Represents a single triangle SVG element that make up the pages of a FlipPad\nclass Flap {\n    constructor(orientation, size, cornerRadius) {\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\n        svg.style.width = size;\n        svg.style.height = size;\n\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n\n        const pathString = this.getPointsStringFromOrientation(\n            orientation, size, cornerRadius\n        );\n\n        path.setAttribute('d', pathString);\n\n        svg.appendChild(path);\n\n        this.svgPath = path;\n        this.svgElement = svg;\n\n        this.enableTransition();\n        svg.style.position           = 'absolute';\n        svg.style.backfaceVisibility = 'hidden';\n\n        // TODO: using this can sometimes cause weird rendering behaviour,\n        // keep an eye on it and find out why\n        svg.style.willChange         = 'transform';\n        svg.style.willChange         = 'z-index';\n    }\n\n    getPointsStringFromOrientation(orientation, size, cornerRadius) {\n        if (orientation === Orientation.TOP) {\n            return this.createTopFlapPathString(size, cornerRadius);\n        }\n        else if (orientation === Orientation.BOTTOM) {\n            return this.createBottomFlapPathString(size, cornerRadius);\n        }\n\n        console.error('Invalid orientation');\n    }\n\n    createBottomFlapPathString(sideLength, cornerRadius) {\n        const edgeLength = sideLength - cornerRadius * 2;\n        const root2 = Math.sqrt(2);\n        const radiusOverRt2 = cornerRadius / root2;\n\n        let pathString = '';\n\n        pathString += 'm' + (edgeLength+cornerRadius) + ' ' + sideLength;\n        pathString += 'h' + (-edgeLength);\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + (-radiusOverRt2) + ' ' + (-(cornerRadius-radiusOverRt2));\n        pathString += 'l' + (edgeLength+(cornerRadius*root2)) + ' '\n            + (-(edgeLength+(cornerRadius*root2)));\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + (cornerRadius-radiusOverRt2) + ' ' + radiusOverRt2;\n        pathString += 'v' + edgeLength;\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + (-cornerRadius) + ' ' + cornerRadius;\n        pathString += 'z';\n\n        return pathString;\n    }\n\n    createTopFlapPathString(sideLength, cornerRadius) {\n        const edgeLength = sideLength - cornerRadius * 2;\n        const root2 = Math.sqrt(2);\n        const radiusOverRt2 = cornerRadius / root2;\n\n        let pathString = '';\n\n        pathString += 'm' + cornerRadius + ' 0';\n        pathString += 'h' + edgeLength;\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + radiusOverRt2 + ' ' + (cornerRadius-radiusOverRt2);\n        pathString += 'l' + -(edgeLength+(cornerRadius*root2)) + ' '\n            + (edgeLength+(cornerRadius*root2));\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + -(cornerRadius-radiusOverRt2) + ' ' + (-radiusOverRt2);\n        pathString += 'v' + (-edgeLength);\n        pathString += 'a' + cornerRadius + ' ' + cornerRadius + ' 0 0 1 '\n            + cornerRadius + ' ' + (-cornerRadius);\n        pathString += 'z';\n\n        return pathString;\n    }\n\n    // Rotates the triangle 180 degrees about a NE axis\n    rotate(onTransitionEndCallback) {\n        this.svgElement.style.transform = 'rotate3d(-1, 1, 0, 180deg)';\n\n        if (onTransitionEndCallback != null) {\n            this.svgElement.ontransitionend = onTransitionEndCallback;\n        }\n    }\n\n    // Resets the transform performed by 'flip'\n    unrotate(onTransitionEndCallback) {\n        this.svgElement.style.transform = 'rotate3d(-1, 1, 0, 0deg)';\n\n        // 'once: true' tells the browser to remove the listener for us after\n        // it's first run\n        if (onTransitionEndCallback != null) {\n            this.svgElement.addEventListener(\n                'transitionend',\n                onTransitionEndCallback,\n                { once: 'true' }\n            );\n        }\n    }\n\n    bringToFront() {\n        this.svgElement.style.zIndex = 1;\n    }\n\n    sendToBack() {\n        this.svgElement.style.zIndex = -1;\n    }\n\n    disableTransition() {\n        this.svgElement.style.transition = null;\n    }\n\n    enableTransition() {\n        this.svgElement.style.transition = 'transform 1s ease ' + this.delay + 'ms';\n    }\n\n    getElement() {\n        return this.svgElement;\n    }\n\n    setFill(fillString) {\n        this.svgPath.style.fill = fillString;\n    }\n\n    setTransitionDelay(delayMilliseconds) {\n        this.delay = delayMilliseconds;\n    }\n}\n\n","import { TransitionComposer, Flipboard, Cycler } from '../script.js';\n\nconst composer = new TransitionComposer({\n    numCols: 6,\n    numRows: 4,\n    rowCoeff: 50,\n    colCoeff: 50,\n    maxVariation: 600,\n});\n\nconst flipboard = new Flipboard({\n    numCols: 6,\n    numRows: 4,\n    padSize: 100,\n    gridGap: 4,\n    cornerRadius: 5,\n    transitionComposer: composer,\n});\n\nconst cycler = new Cycler(\n    flipboard,\n    4,\n    ['image/1.jpg', 'image/2.jpg', 'image/3.jpg', 'image/4.jpg']\n);\n\ndocument.getElementsByClassName('container')[0].appendChild(flipboard.getElement());\n\ndocument.getElementById('cycleButton').onclick = () => cycler.manualCycle();\n"],"names":[],"mappings":"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"}